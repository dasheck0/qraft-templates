---
description: 
globs: 
alwaysApply: false
---
# Task List Management

Guidelines for managing task lists in markdown files to track progress on completing a PRD

## Follow these guidelines when implementing tasks

- Do no leave comments // TODO to indicate that something must be done here. It is easy to overlook. If you must, atleast summarize them once you are done with your task.
- Reuse existing components instead of creating new ones or use plain html elements

## Task Implementation
### Do this before you start working on an implementation plan

- Ask the user if what level of Vibe Coding he wants to do. Currently we support three modes

1. Yolo: Implement the full task list without human intervention and feedback. Stick to the rules outlined by this document and prompt summaries to the user but keep going and donÄt ask for permission or feedback in any way. Assume the user is not present and you are in a context, where no human feedback is possible
2. Broad: Once you are done with a **subtask** print a summary and continue with the next subtask. Once you are finished with all subtasks, continue with completing the parent task and after this is done instruct the user to test it. Only if you get a greenlight by the user you may continue with the next parent task. 
3. Secure: Once you are done with a **subtask** print a summary and instruct the user to test it. Only if you get a greenlight by the user you may continue with your next **subtask**

The user may switch from one mode to another during your work so be aware and keep track of the current vibe coding mode.

Ask the user if he wants to write tests for this projects. Some of them have tests, some of them don't. If the user 
explicitly states, that he does not want tests, ignore all further instructions in this document regarding tests. The user 
may switch from tests to no tests (and vice versa) at any point during your work. So be aware and keep track of the current test mode.

### Do this everytime before you start a subtask

- Read in the implementation guidelines first under .tasks/implementation_guidelines.md to understand how this project is structured, so that you know what needs to be done.
- Read in other relevnat documents you may find under docs/ Especially the design_guidelines.md may be interesting to you if present
- Understand the task at hand and define an internal implementation plan and respect the implementation guidelines and other docs you found
- Do **NOT** start the next sub-task until the former subtask is correctly implemented

### Do this everytime after you finished a subtask

- Print a quick summary to the user what you did, and if you diverted from the guidelines in any way. If so explain why and how
- Summarize if you skipped an implementation and why. Did you add a // TODO comment somewhere?
- When you finish a **sub‑task**, immediately mark it as completed by changing `[ ]` to `[x]`.
- Re-read this document (.tasks/process-tasks.mdc) in order to remember how to implement correctly and so that you get the latest changes

### Do this after you finished all subtasks within a parent task

If **all** subtasks underneath a parent task are now `[x]`, follow this sequence:

- **First**: Check, whether the functions are implemented correctly by asking the user to test the functionality, if applicable
- **Only if all user acceptance tests pass**: Continue. Fix implementation error based on user feedback otherwise.
- **Clean up**: Remove any temporary files and temporary code
- **Commit**: Use a descriptive commit message that:
- Uses conventional commit format (`feat:`, `fix:`, `refactor:`, etc.)
- Summarizes what was accomplished in the parent task
- Lists key changes and additions
- References the task number and PRD context
- **Formats the message as a single-line command using `-m` flags**, e.g.:
   ```
   git commit -m "feat: add payment validation logic" -m "- Validates card type and expiry" -m "- Adds unit tests for edge cases" -m "Related to T123 in PRD"
   ```
- Once all the subtasks are marked completed and changes have been committed, mark the **parent task** as completed.

## Task List Maintenance

1. **Update the task list as you work:**
   - Mark tasks and subtasks as completed (`[x]`) per the protocol above.
   - Add new tasks as they emerge.

2. **Maintain the "Relevant Files" section:**
   - List every file created or modified.
   - Give each file a one‑line description of its purpose.

## AI Instructions

When working with task lists, the AI must:

1. Regularly update the task list file after finishing any significant work.
2. Follow the completion protocol:
   - Mark each finished **sub‑task** `[x]`.
   - Mark the **parent task** `[x]` once **all** its subtasks are `[x]`.
3. Add newly discovered tasks.
4. Keep "Relevant Files" accurate and up to date.
5. Before starting work, check which sub‑task is next.
6. After implementing a all sub tasks and therefore completing a parent task, update the file and then pause for user approval, if not told otherwise
